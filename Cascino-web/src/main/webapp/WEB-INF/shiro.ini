[main]
# Create and setup user filter.
#user = com.example.filter.FacesAjaxAwareUserFilter
user.loginUrl = /faces/login.xhtml

# Create JDBC realm.
jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm

# Configure JDBC realm datasource.
#dataSource = org.postgresql.ds.PGSimpleDataSource
#dataSource.URL = jdbc:postgresql://localhost:5432/cascino_db
#dataSource.user =  cascino_user_db
#dataSource.password = cascino
#dataSource.databaseName = cascino_db
#dataSource.serverName = localhost
#dataSource.portNumber = 5432

dataSource = org.apache.shiro.jndi.JndiObjectFactory
dataSource.resourceName = java:jboss/datasources/PostgresqlDS
dataSource.requiredType = javax.sql.DataSource

jdbcRealm.permissionsLookupEnabled = true 
jdbcRealm.dataSource = $dataSource

#jdbcRealm.saltStyle  = realm.SaltStyle.CRYPT
#securityManager.realms = $jdbcRealm

# Configure JDBC realm SQL queries.
jdbcRealm.authenticationQuery = select password from users where login = ? and stato = 'ok'
#jdbcRealm.userRolesQuery = select role from usersroles where "user" = (select id from users where login = ?)
jdbcRealm.userRolesQuery = select urn.role from users u inner join usersroles ur on u.id = ur."user" inner join usersrolenames urn on ur.role = urn.id where login = ?;
#jdbcRealm.permissionsQuery = select azione from userspermissions where role = (select id from usersroles where role = ?)
jdbcRealm.permissionsQuery = select up.azione from usersrolenames urn inner join userspermissions up on urn.id = up.role where urn.role = ?;

# Configure JDBC realm password hashing.
credentialsMatcher = org.apache.shiro.authc.credential.HashedCredentialsMatcher
credentialsMatcher.hashAlgorithmName = SHA-256
credentialsMatcher.hashIterations=1
jdbcRealm.credentialsMatcher = $credentialsMatcher

[urls]
/*/mostraInfoArticolo.xhtml* = anon
/login.xhtml = user
/** = user
/logout = logout



